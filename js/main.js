let game,light,level,gun,ammo,enemy,title,controls,player,audio;const Map=(e,a,o,r,t)=>(e-a)*(t-r)/(o-a)+r,Color=(e,a)=>e?`hsl(40, 92%, ${a}%)`:`hsl(271, 18%, ${a}%)`,Random=(e,a)=>Math.floor(Math.random()*(++a-e)+e);function Setup(){(game={canvas:document.getElementsByTagName("canvas")[0],renderer:null,resolution:{w:window.innerWidth,h:window.innerHeight,s:1/Math.floor(Map(window.innerWidth,0,3840,2,4))},camera:null,scene:new THREE.Scene,composer:null,pass:null,time:0,isPlaying:!1}).renderer=new THREE.WebGLRenderer({canvas:game.canvas}),game.renderer.setSize(game.resolution.w*=game.resolution.s,game.resolution.h*=game.resolution.s,!1),game.renderer.setClearColor(Color(0,5)),game.renderer.shadowMap.enabled=!0,game.scene.add(game.camera=new THREE.PerspectiveCamera(90,game.resolution.w/game.resolution.h,.1,1e3)),World(),Filter(),Input(),Draw()}function World(){light={ambient:new THREE.AmbientLight(Color(0,5),.5),point:new THREE.PointLight(Color(0,95),.5,100)},game.scene.add(light.ambient),game.camera.add(light.point),light.point.position.set(5,5,5),light.point.castShadow=!0,light.point.shadow.mapSize=new THREE.Vector2(64,64);const e="\n    uniform float uTime;\n    uniform float uMorph;\n    uniform float uDistort;\n  ",a="\n    vec3 transformed = vec3(position);\n\n    transformed.x += sin((uTime * .375 + position.x) * 20.) * .0015 * uMorph;\n    transformed.y += sin((uTime * .375 + position.y) * 20.) * .0015 * uMorph;\n    transformed.z += sin((uTime * .375 + position.z) * 20.) * .0015 * uMorph;\n\n    if (uDistort > 0.) {\n      transformed.x += fract(sin(dot(position.x + uTime * .00000025, (12.9898, 78.233))) * 43758.5453123) * uDistort;\n      transformed.y += fract(sin(dot(position.x + uTime * .00000025, (12.9898, 78.233))) * 43758.5453123) * uDistort;\n      transformed.z += fract(sin(dot(position.x + uTime * .00000025, (12.9898, 78.233))) * 43758.5453123) * uDistort;\n    }\n  ";let o,r;(level={map:"\n      CHHHHHHHHHHHHHHHHHHHHHHHHHHHHC\n      VFFFFFFFFFFFFFFFFFFFFFFFFFFFFV\n      VFFFFFFFFFFFFFFFFFFFFFFFFFFFFV\n      VFF3ehhh4ehhh4eh0FFFFFFF3e0FFV\n      VFFvFFFFvFFFFvFFvFFFFFFFvFvFFV\n      VFFvFFFFaFFFF7eh6hh4ehhh5FvFFV\n      VFFvFFFFvFFFFvFFFFFvFFFF2e1FFV\n      VFF2ehhh1FFFF2ehhhh1FFFFFFFFFV\n      VFFFFFFFFFFFFFFFFFFFFFFFFFFFFV\n      VFFFFFFFFFFFFFFFFFFFFFFFFFFFFV\n      CHHHHHHHHHHHHHHHHHHHHHHHHHHHHC\n    ",path:[],enemy:[],geometry:{o:new THREE.Geometry,h:new THREE.Geometry,v:new THREE.Geometry,0:new THREE.Geometry,1:new THREE.Geometry,2:new THREE.Geometry,3:new THREE.Geometry,4:new THREE.Geometry,5:new THREE.Geometry,6:new THREE.Geometry,7:new THREE.Geometry},material:[],shader:[],mesh:new THREE.Group}).map=level.map.split("\n");for(let e=0,a=level.map.length;e<a;e++)for(let a=0,t=level.map[e].length;a<t;a++)if(" "!==(o=level.map[e].charAt(a)))switch(o){case"F":(r=new THREE.PlaneGeometry(20,20)).rotateX(270*Math.PI/180),r.translate(20*a,-10,20*e),level.geometry.o.merge(r);break;case"H":(r=new THREE.PlaneGeometry(20,10)).translate(20*a,-10,20*e),level.geometry.o.merge(r);break;case"V":(r=new THREE.PlaneGeometry(20,10)).rotateY(90*Math.PI/180),r.translate(20*a,-10,20*e),level.geometry.o.merge(r);break;case"C":(r=new THREE.CylinderGeometry(0,20,80)).translate(20*a,0,20*e),level.geometry.o.merge(r);break;default:switch(level.path.push(new THREE.Vector3(20*a,0,20*e)),(r=new THREE.BoxGeometry(20,20,20)).translate(20*a,0,20*e),o){case"e":level.path.pop(),level.enemy.push(new THREE.Vector3(20*a,0,20*e));case"h":level.geometry.h.merge(r);break;case"a":game.camera.position.set(20*a,0,20*e);case"v":level.geometry.v.merge(r);break;case"0":level.geometry[0].merge(r);break;case"1":level.geometry[1].merge(r);break;case"2":level.geometry[2].merge(r);break;case"3":level.geometry[3].merge(r);break;case"4":level.geometry[4].merge(r);break;case"5":level.geometry[5].merge(r);break;case"6":level.geometry[6].merge(r);break;case"7":level.geometry[7].merge(r)}}level.material.push(new THREE.MeshBasicMaterial({depthWrite:!1,transparent:!0,opacity:0})),level.material.push(new THREE.MeshLambertMaterial({side:THREE.DoubleSide,color:Color(0,25)})),level.material.push(new THREE.MeshPhongMaterial({side:THREE.DoubleSide,transparent:!0,opacity:.25,color:Color(1,75)}));const t=new THREE.TextureLoader,n=[];for(let e=0;e<6;e++){n.push([]);for(let a=0;a<3;a++)n[e].push(t.load(`jpg/${e}${a}.jpg`))}let l=0;for(let e=0;e<6;e++)level.material.push(new THREE.MeshLambertMaterial({side:THREE.DoubleSide,map:n[e][l]}));setInterval(()=>{++l>2&&(l=0),level.material[3].map=n[0][l],level.material[3].needsUpdate=!0,level.material[4].map=n[1][l],level.material[4].needsUpdate=!0,level.material[5].map=n[2][l],level.material[5].needsUpdate=!0,level.material[6].map=n[3][l],level.material[6].needsUpdate=!0,level.material[7].map=n[4][l],level.material[7].needsUpdate=!0,level.material[8].map=n[5][l],level.material[8].needsUpdate=!0},500);for(let o=1,r=level.material.length;o<r;o++)level.material[o].onBeforeCompile=(r=>{level.shader[o]=r,r.uniforms.uTime={value:0},r.uniforms.uMorph={value:7.5},r.uniforms.uDistort={value:5},r.vertexShader=e+r.vertexShader,r.vertexShader=r.vertexShader.replace("#include <begin_vertex>",a)});game.scene.add(level.mesh.add(new THREE.Mesh(level.geometry.o,level.material[1]))),level.mesh.add(new THREE.Mesh(level.geometry.h,level.material));for(let e=0,a=level.geometry.h.faces.length;e<a;e++)switch(e%12){case 4:case 5:case 6:case 7:level.geometry.h.faces[e].materialIndex=Random(6,8);break;case 8:case 9:case 10:case 11:level.geometry.h.faces[e].materialIndex=1===Random(1,5)?Random(3,5):2;break;default:level.geometry.h.faces[e].materialIndex=0}level.mesh.add(new THREE.Mesh(level.geometry.v,level.material));for(let e=0,a=level.geometry.v.faces.length;e<a;e++)switch(e%12){case 0:case 1:case 2:case 3:level.geometry.v.faces[e].materialIndex=1===Random(1,5)?Random(3,5):2;break;case 4:case 5:case 6:case 7:level.geometry.v.faces[e].materialIndex=Random(6,8);break;default:level.geometry.v.faces[e].materialIndex=0}level.mesh.add(new THREE.Mesh(level.geometry[0],level.material));for(let e=0,a=level.geometry[0].faces.length;e<a;e++)switch(e%12){case 0:case 1:case 10:case 11:level.geometry[0].faces[e].materialIndex=1===Random(1,5)?Random(3,5):2;break;case 4:case 5:case 6:case 7:level.geometry[0].faces[e].materialIndex=Random(6,8);break;default:level.geometry[0].faces[e].materialIndex=0}level.mesh.add(new THREE.Mesh(level.geometry[1],level.material));for(let e=0,a=level.geometry[1].faces.length;e<a;e++)switch(e%12){case 0:case 1:case 8:case 9:level.geometry[1].faces[e].materialIndex=1===Random(1,5)?Random(3,5):2;break;case 4:case 5:case 6:case 7:level.geometry[1].faces[e].materialIndex=Random(6,8);break;default:level.geometry[1].faces[e].materialIndex=0}level.mesh.add(new THREE.Mesh(level.geometry[2],level.material));for(let e=0,a=level.geometry[2].faces.length;e<a;e++)switch(e%12){case 2:case 3:case 8:case 9:level.geometry[2].faces[e].materialIndex=1===Random(1,5)?Random(3,5):2;break;case 4:case 5:case 6:case 7:level.geometry[2].faces[e].materialIndex=Random(6,8);break;default:level.geometry[2].faces[e].materialIndex=0}level.mesh.add(new THREE.Mesh(level.geometry[3],level.material));for(let e=0,a=level.geometry[3].faces.length;e<a;e++)switch(e%12){case 2:case 3:case 10:case 11:level.geometry[3].faces[e].materialIndex=1===Random(1,5)?Random(3,5):2;break;case 4:case 5:case 6:case 7:level.geometry[3].faces[e].materialIndex=Random(6,8);break;default:level.geometry[3].faces[e].materialIndex=0}level.mesh.add(new THREE.Mesh(level.geometry[4],level.material));for(let e=0,a=level.geometry[4].faces.length;e<a;e++)switch(e%12){case 4:case 5:case 6:case 7:level.geometry[4].faces[e].materialIndex=Random(6,8);break;case 10:case 11:level.geometry[4].faces[e].materialIndex=1===Random(1,5)?Random(3,5):2;break;default:level.geometry[4].faces[e].materialIndex=0}level.mesh.add(new THREE.Mesh(level.geometry[5],level.material));for(let e=0,a=level.geometry[5].faces.length;e<a;e++)switch(e%12){case 0:case 1:level.geometry[5].faces[e].materialIndex=1===Random(1,5)?Random(3,5):2;break;case 4:case 5:case 6:case 7:level.geometry[5].faces[e].materialIndex=Random(6,8);break;default:level.geometry[5].faces[e].materialIndex=0}level.mesh.add(new THREE.Mesh(level.geometry[6],level.material));for(let e=0,a=level.geometry[6].faces.length;e<a;e++)switch(e%12){case 4:case 5:case 6:case 7:level.geometry[6].faces[e].materialIndex=Random(6,8);break;case 8:case 9:level.geometry[6].faces[e].materialIndex=1===Random(1,5)?Random(3,5):2;break;default:level.geometry[6].faces[e].materialIndex=0}level.mesh.add(new THREE.Mesh(level.geometry[7],level.material));for(let e=0,a=level.geometry[7].faces.length;e<a;e++)switch(e%12){case 2:case 3:level.geometry[7].faces[e].materialIndex=1===Random(1,5)?Random(3,5):2;break;case 4:case 5:case 6:case 7:level.geometry[7].faces[e].materialIndex=Random(6,8);break;default:level.geometry[7].faces[e].materialIndex=0}level.geometry.h.merge(level.geometry.v),level.geometry.h.merge(level.geometry[0]),level.geometry.h.merge(level.geometry[1]),level.geometry.h.merge(level.geometry[2]),level.geometry.h.merge(level.geometry[3]),level.geometry.h.merge(level.geometry[4]),level.geometry.h.merge(level.geometry[5]),level.geometry.h.merge(level.geometry[6]),level.geometry.h.merge(level.geometry[7]),level.mesh.add(new THREE.LineSegments(new THREE.EdgesGeometry(level.geometry.h),level.material[1]));for(let e=0,a=level.mesh.children.length;e<a;e++)level.mesh.children[e].receiveShadow=!0;(gun={material:new THREE.MeshPhongMaterial({transparent:!0,opacity:0,vertexColors:THREE.FaceColors}),shader:null,mesh:new THREE.Group,rotation:new THREE.Vector3,isShooting:!1,isRotating:!1,isSecondary:!1,isMoving:!1}).material.onBeforeCompile=(o=>{gun.shader=o,o.uniforms.uTime={value:0},o.uniforms.uMorph={value:2.5},o.vertexShader=e+o.vertexShader,o.vertexShader=o.vertexShader.replace("#include <begin_vertex>",a)}),game.camera.add(gun.mesh.add(new THREE.Mesh(new THREE.BoxGeometry(.2,.4,.8),gun.material))),gun.mesh.position.set(0,-.75,-2),gun.mesh.children[0].geometry.faces.forEach(e=>e.color.set(Color(0,Random(75,100)))),gun.mesh.add(new THREE.Mesh(new THREE.BoxGeometry(.175,.2,.175),gun.material)),gun.mesh.children[1].geometry.faces.forEach(e=>e.color.set(Color(0,Random(25,50)))),gun.mesh.children[1].position.set(0,-.3,.3),(ammo={material:new THREE.MeshPhongMaterial({transparent:!0,opacity:0,color:Color(1,Random(65,75))}),shader:null,mesh:[],count:9}).material.onBeforeCompile=(o=>{ammo.shader=o,o.uniforms.uTime={value:0},o.uniforms.uMorph={value:1},o.uniforms.uDistort={value:.02},o.vertexShader=e+o.vertexShader,o.vertexShader=o.vertexShader.replace("#include <begin_vertex>",a)}),(enemy={material:new THREE.MeshLambertMaterial({opacity:1,color:Color(1,Random(65,75))}),shader:null,mesh:[],health:[],isClose:!1}).material.onBeforeCompile=(o=>{enemy.shader=o,o.uniforms.uTime={value:0},o.uniforms.uMorph={value:5},o.uniforms.uDistort={value:5},o.vertexShader=e+o.vertexShader,o.vertexShader=o.vertexShader.replace("#include <begin_vertex>",a)}),(title={material:new THREE.MeshLambertMaterial({color:Color(1,75)}),shader:null,mesh:null}).material.onBeforeCompile=(o=>{title.shader=o,o.uniforms.uTime={value:0},o.uniforms.uMorph={value:5},o.uniforms.uDistort={value:.25},o.vertexShader=e+o.vertexShader,o.vertexShader=o.vertexShader.replace("#include <begin_vertex>",a)}),(new THREE.FontLoader).load("json/Pomeranian_Regular.json",e=>{const a={font:e,size:.1,height:.01},o="!一二三四五六七八九";for(let e=0,r=o.length;e<r;e++)ammo.mesh[e]=new THREE.Mesh(new THREE.TextBufferGeometry(o.charAt(e),a),ammo.material),ammo.mesh[e].position.set(.15,.25,-.4);gun.mesh.add(ammo.mesh[9]),a.size=5;for(let e=1,r=o.length;e<r;e++)game.scene.add(enemy.mesh[e-1]=new THREE.Mesh(new THREE.TextBufferGeometry(o.charAt(e),a),enemy.material)),enemy.mesh[e-1].rotation.set(0,90*Math.PI/180,0),enemy.mesh[e-1].position.set(level.enemy[e-1].x,level.enemy[e-1].y-2.75,level.enemy[e-1].z+5.5),enemy.mesh[e-1].castShadow=!0,enemy.health.push(2+Math.floor(e/2));a.size=1,game.scene.add(title.mesh=new THREE.Mesh(new THREE.TextBufferGeometry("waraws\nBARELY\nOPAQUE\nRED",a),title.material)),title.mesh.position.set(game.camera.position.x-4.25,game.camera.position.y+3.1875,game.camera.position.z-10)})}function Filter(){game.composer=new THREE.EffectComposer(game.renderer),game.composer.addPass(new THREE.RenderPass(game.scene,game.camera)),game.composer.addPass(game.pass=new THREE.ShaderPass({uniforms:{tDiffuse:{value:null},uPixelSize:{value:1},uResolution:{value:new THREE.Vector2(game.resolution.w,game.resolution.h)},uTime:{value:0}},vertexShader:"\n      varying vec2 vUv;\n\n      void main() {\n        vUv = uv;\n\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.);\n      }\n    ",fragmentShader:"\n      uniform sampler2D tDiffuse;\n      uniform float uPixelSize;\n      uniform vec2 uResolution;\n      uniform float uTime;\n\n      varying vec2 vUv;\n\n      float random(vec2 uv) {\n        return fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453123);\n      }\n\n      void main() {\n        vec4 pixelated = texture2D(tDiffuse, uPixelSize / uResolution * floor(vUv / (uPixelSize / uResolution)));\n        vec4 noisy = pixelated * .9875 + random(vUv * (sin(uTime) + 10.)) * .0125;\n        gl_FragColor = vec4(noisy.r, (noisy.g + noisy.b) * .5, (noisy.g + noisy.b) * .5, 1.);\n      }\n    "})),game.pass.renderToScreen=!0}function Sound(){audio={listener:new THREE.AudioListener,drums:[],bass:[],lead:[],indexDrums:0,indexBassLead:0},game.camera.add(audio.listener);for(let e=0;e<3;e++)audio.drums.push(new THREE.Audio(audio.listener)),audio.bass.push(new THREE.Audio(audio.listener)),audio.lead.push(new THREE.Audio(audio.listener)),(new THREE.AudioLoader).load(`mp3/d${e}.mp3`,a=>{audio.drums[e].setBuffer(a),2===e&&(audio.drums[0].play(),setInterval(()=>{audio.drums[audio.indexDrums].isPlaying&&audio.drums[audio.indexDrums].stop(),Random(0,1)?audio.indexDrums++:audio.indexDrums--,audio.indexDrums<0?audio.indexDrums=2:audio.indexDrums>2&&(audio.indexDrums=0),audio.drums[audio.indexDrums].play()},4e3))}),(new THREE.AudioLoader).load(`mp3/b${e}.mp3`,a=>{audio.bass[e].setBuffer(a),2===e&&(audio.bass[0].play(),setInterval(()=>{audio.bass[audio.indexBassLead].isPlaying&&audio.bass[audio.indexBassLead].stop(),Random(0,1)?audio.indexBassLead++:audio.indexBassLead--,audio.indexBassLead<0?audio.indexBassLead=2:audio.indexBassLead>2&&(audio.indexBassLead=0),Random(0,1)&&audio.bass[audio.indexBassLead].play()},2e3))}),(new THREE.AudioLoader).load(`mp3/l${e}.mp3`,a=>{audio.lead[e].setBuffer(a),2===e&&(audio.lead[0].play(),setInterval(()=>{audio.lead[audio.indexBassLead].isPlaying&&audio.lead[audio.indexBassLead].stop(),audio.lead[audio.indexBassLead].play()},2e3))})}function Input(){window.ondeviceorientation=window.onresize=(()=>{game.resolution.s=1/Math.floor(Map(window.innerWidth,0,3840,2,4)),game.renderer.setSize(game.resolution.w=window.innerWidth*game.resolution.s,game.resolution.h=window.innerHeight*game.resolution.s,!1),game.camera.aspect=game.resolution.w/game.resolution.h,game.camera.updateProjectionMatrix(),game.pass.uniforms.uResolution.value=new THREE.Vector2(game.resolution.w,game.resolution.h),game.composer.reset()}),controls={touch:{s:{x:0,y:0},e:{x:0,y:0},m:{x:0,y:0}},swipe:"",mouse:{x:0,y:0},areLocked:!0},player={rotation:new THREE.Vector3,position:new THREE.Vector3,isFacing:{v:["north","west","south","east"],i:0},isMoving:!1,move:"",isAiming:!1,look:""};const e=()=>{game.isPlaying=!0,controls.areLocked=!1,Sound(),game.scene.remove(title.mesh),a("forward")},a=e=>{switch(controls.areLocked=!0,player.rotation.copy(game.camera.rotation),player.position.copy(game.camera.position),player.isMoving=!0,e){case"forward":player.move="forward";break;case"backward":switch(player.move="backward",player.isFacing.i+=2,player.isFacing.i>2&&(player.isFacing.i-=4,player.isFacing.i<0&&(player.isFacing.i+=4)),player.look){case"center-to-left":player.rotation.y+=150*Math.PI/180;break;case"center-to-right":player.rotation.y-=150*Math.PI/180;break;default:player.rotation.y+=Math.PI}break;case"left":player.move="left",player.isFacing.i++,player.isFacing.i>3&&(player.isFacing.i-=4),player.rotation.y+=60*Math.PI/180;break;case"right":player.move="right",player.isFacing.i--,player.isFacing.i<0&&(player.isFacing.i+=4),player.rotation.y-=60*Math.PI/180}},o=()=>{if(!gun.isShooting&&!gun.isRotating){gun.isShooting=!0,gun.mesh.remove(ammo.mesh[ammo.count]),ammo.count||(ammo.count=10),ammo.material.color=new THREE.Color(Color(1,Random(65,75))),gun.mesh.add(ammo.mesh[--ammo.count]);for(let e=0;e<level.enemy.length;e++)Math.abs(level.enemy[e].x-game.camera.position.x)<=20&&level.enemy[e].z===player.position.z&&!gun.isSecondary&&enemy.shader.uniforms.uDistort.value<5&&enemy.health[e]--}};game.canvas.ontouchstart=(e=>{e.preventDefault()}),window.ontouchstart=(e=>{controls.areLocked||(controls.touch.s.x=e.changedTouches[0].clientX/window.innerWidth*2-1,controls.touch.s.y=e.changedTouches[0].clientY/window.innerHeight*-2+1)}),window.ontouchend=(r=>{if(game.isPlaying){if(!controls.areLocked)if(controls.touch.e.x=r.changedTouches[0].clientX/window.innerWidth*2-1,controls.touch.e.y=r.changedTouches[0].clientY/window.innerHeight*-2+1,controls.swipe="",Math.abs(controls.touch.s.x-controls.touch.e.x)>.25&&(controls.touch.s.x-controls.touch.e.x<0?controls.swipe+="right":controls.swipe+="left"),Math.abs(controls.touch.s.y-controls.touch.e.y)>.25&&(controls.touch.s.y-controls.touch.e.y<0?controls.swipe+="up":controls.swipe+="down"),player.isAiming)switch(controls.swipe){case"":o();break;case"up":gun.isSecondary||(gun.isRotating=!0);break;case"down":if(gun.isSecondary)gun.isRotating=!0;else{player.isAiming=!1;for(let e=0,a=gun.mesh.children.length-1;e<a;e++)gun.mesh.children[e].castShadow=!1}}else switch(controls.swipe){case"":switch(player.look){case"center-to-left":a("left");break;case"center-to-right":a("right");break;default:a("forward")}break;case"right":"center-to-right"===player.look?player.look="right-to-center":"center-to-left"===player.look?a("left"):player.look="center-to-left";break;case"left":"center-to-left"===player.look?player.look="left-to-center":"center-to-right"===player.look?a("right"):player.look="center-to-right";break;case"down":a("backward");break;case"up":player.isAiming=!0;for(let e=0,a=gun.mesh.children.length-1;e<a;e++)gun.mesh.children[e].castShadow=!0}}else e()}),window.ontouchmove=(e=>{!controls.areLocked&&player.isAiming&&(controls.touch.m.x=e.changedTouches[0].clientX/window.innerWidth*2-1,controls.touch.m.y=e.changedTouches[0].clientY/window.innerHeight*-2+1,gun.rotation.y=-controls.touch.m.x)}),window.onmousemove=(e=>{controls.areLocked||(controls.mouse.x=e.clientX/window.innerWidth*2-1,controls.mouse.y=e.clientY/window.innerHeight*-2+1,player.isAiming?(gun.rotation.y=-controls.mouse.x,gun.rotation.x=controls.mouse.y/2):controls.mouse.x<-.5?player.look="center-to-left":controls.mouse.x>-.5&&controls.mouse.x<0?player.look="left-to-center":controls.mouse.x>.5?player.look="center-to-right":controls.mouse.x<.5&&controls.mouse.x>0&&(player.look="right-to-center"))});let r=0;window.onmousedown=(()=>{game.isPlaying?controls.areLocked||(player.isAiming?o():controls.mouse.y<-.5?a("backward"):controls.mouse.x>-.5&&controls.mouse.x<.5?a("forward"):controls.mouse.x>.5?a("right"):controls.mouse.x<-.5&&a("left"),++r):e()}),window.onkeydown=(e=>{switch(e.code){case"KeyR":player.isAiming&&(gun.isRotating=!0);break;case"KeyG":if(!controls.areLocked){player.isAiming=!player.isAiming,gun.isSecondary&&(gun.isRotating=!0);for(let e=0,a=gun.mesh.children.length-1;e<a;e++)gun.mesh.children[e].castShadow=!gun.mesh.children[e].castShadow}}})}function Draw(e){requestAnimationFrame(Draw),game.time=e/1e3;for(let e=1,a=level.material.length;e<a;e++)level.shader[e]&&(level.shader[e].uniforms.uTime.value=game.time);if(gun.shader&&(gun.shader.uniforms.uTime.value=game.time),ammo.shader&&(ammo.shader.uniforms.uTime.value=game.time),enemy.shader&&(enemy.shader.uniforms.uTime.value=game.time),title.shader&&(title.shader.uniforms.uTime.value=game.time),player.isMoving){enemy.isClose=!1;for(let e=0;e<level.enemy.length;e++)Math.abs(level.enemy[e].x-game.camera.position.x)<=20&&level.enemy[e].z===player.position.z&&(enemy.isClose=!0);switch(!enemy.isClose&&enemy.shader.uniforms.uDistort.value<5&&(enemy.shader.uniforms.uDistort.value=5),player.move){case"forward":switch(player.isFacing.v[player.isFacing.i]){case"north":for(let e=0,a=level.path.length;e<a;e++)player.position.x===level.path[e].x&&player.position.z===level.path[e].z+20&&(game.camera.position.z-=.5,game.camera.position.z<player.position.z-20&&(game.camera.position.z=player.position.z-20,player.isMoving=controls.areLocked=!1));player.position.z===game.camera.position.z&&(player.isMoving=controls.areLocked=!1);break;case"west":for(let e=0,a=level.path.length;e<a;e++)player.position.x===level.path[e].x+20&&player.position.z===level.path[e].z&&(game.camera.position.x-=.5,game.camera.position.x<player.position.x-20&&(game.camera.position.x=player.position.x-20,player.isMoving=controls.areLocked=!1));player.position.x===game.camera.position.x&&(player.isMoving=controls.areLocked=!1);break;case"south":for(let e=0,a=level.path.length;e<a;e++)player.position.x===level.path[e].x&&player.position.z===level.path[e].z-20&&(game.camera.position.z+=.5,game.camera.position.z>player.position.z+20&&(game.camera.position.z=player.position.z+20,player.isMoving=controls.areLocked=!1));player.position.z===game.camera.position.z&&(player.isMoving=controls.areLocked=!1);break;case"east":for(let e=0,a=level.path.length;e<a;e++)player.position.x===level.path[e].x-20&&player.position.z===level.path[e].z&&(game.camera.position.x+=.5,game.camera.position.x>player.position.x+20&&(game.camera.position.x=player.position.x+20,player.isMoving=controls.areLocked=!1));player.position.x===game.camera.position.x&&(player.isMoving=controls.areLocked=!1)}break;case"left":case"backward":"center-to-right"===player.look?(game.camera.rotation.y-=.1,game.camera.rotation.y<player.rotation.y&&(game.camera.rotation.y=player.rotation.y,player.isMoving=controls.areLocked=!1)):(game.camera.rotation.y+=.1,game.camera.rotation.y>player.rotation.y&&(game.camera.rotation.y=player.rotation.y,player.isMoving=controls.areLocked=!1));break;case"right":game.camera.rotation.y-=.1,game.camera.rotation.y<player.rotation.y&&(game.camera.rotation.y=player.rotation.y,player.isMoving=controls.areLocked=!1)}}else if(player.isAiming){if(gun.material.opacity<1?(gun.material.depthFunc!==THREE.LessEqualDepth&&(gun.material.depthFunc=ammo.material.depthFunc=THREE.LessEqualDepth,gun.material.needsUpdate=ammo.material.needsUpdate=!0),gun.material.opacity=ammo.material.opacity+=.05):gun.material.opacity=ammo.material.opacity=1,gun.mesh.rotation.y>gun.rotation.y+.05?gun.mesh.rotation.y-=.05:gun.mesh.rotation.y<gun.rotation.y-.05&&(gun.mesh.rotation.y+=.05),gun.mesh.rotation.x>gun.rotation.x+.05?gun.mesh.rotation.x-=.05:gun.mesh.rotation.x<gun.rotation.x-.05&&(gun.mesh.rotation.x+=.05),gun.isShooting){gun.isMoving?("forward"===gun.isMoving?(gun.mesh.children[0].position.z+=.0125,gun.isSecondary?(gun.isRotating=!0,gun.shader.uniforms.uMorph.value=ammo.shader.uniforms.uMorph.value+=6.25,enemy.isClose&&(enemy.shader.uniforms.uMorph.value+=250,enemy.shader.uniforms.uDistort.value-=.5,enemy.shader.uniforms.uDistort.value<1&&(enemy.shader.uniforms.uDistort.value=1))):(gun.shader.uniforms.uMorph.value=ammo.shader.uniforms.uMorph.value+=1.25,enemy.isClose&&(enemy.shader.uniforms.uMorph.value+=125))):"backward"===gun.isMoving&&(gun.mesh.children[0].position.z-=.0125,gun.isSecondary?(gun.shader.uniforms.uMorph.value=ammo.shader.uniforms.uMorph.value-=6.25,enemy.isClose&&(enemy.shader.uniforms.uMorph.value-=250)):(gun.shader.uniforms.uMorph.value=ammo.shader.uniforms.uMorph.value-=1.25,enemy.isClose&&(enemy.shader.uniforms.uMorph.value-=125))),gun.mesh.children[0].position.z>=.1?gun.isMoving="":gun.mesh.children[0].position.z<0&&(gun.isShooting=!1,gun.isMoving="",gun.mesh.children[0].position.z=0,gun.shader.uniforms.uMorph.value=ammo.shader.uniforms.uMorph.value=2.5,enemy.isClose&&(enemy.shader.uniforms.uMorph.value=5))):gun.isMoving=gun.mesh.children[0].position.z<.1?"forward":"backward";for(let e=0;e<level.enemy.length;e++)enemy.health[e]||(enemy.material.transparent||(enemy.material.transparent=!0),enemy.material.opacity-=.05,enemy.material.opacity<0&&(enemy.health.splice(e,1),level.path.push(level.enemy[e]),level.enemy.splice(e,1),game.scene.remove(enemy.mesh[e]),enemy.mesh.splice(e,1),enemy.shader.uniforms.uDistort.value=5,enemy.isClose=!1,enemy.material.transparent=!1,enemy.material.opacity=1))}if(gun.isRotating)if(gun.isSecondary){gun.mesh.rotation.z-=.05;for(let e=0,a=ammo.mesh.length;e<a;e++)ammo.mesh[e].rotation.z+=.05;if(gun.mesh.rotation.z<0){gun.isRotating=!1,gun.isSecondary=!1,gun.mesh.rotation.z=0;for(let e=0,a=ammo.mesh.length;e<a;e++)ammo.mesh[e].rotation.z=0}}else{gun.mesh.rotation.z+=.05;for(let e=0,a=ammo.mesh.length;e<a;e++)ammo.mesh[e].rotation.z-=.05;if(gun.mesh.rotation.z>90*Math.PI/180){gun.isRotating=!1,gun.isSecondary=!0,gun.mesh.rotation.z=90*Math.PI/180;for(let e=0,a=ammo.mesh.length;e<a;e++)ammo.mesh[e].rotation.z=-90*Math.PI/180}}}else gun.material.opacity>0?gun.material.opacity=ammo.material.opacity-=.05:(gun.material.opacity=ammo.material.opacity=0,gun.material.depthFunc=ammo.material.depthFunc=THREE.GreaterEqualDepth,gun.material.needsUpdate=ammo.material.needsUpdate=!0),"center-to-left"===player.look?(controls.areLocked=!0,game.camera.rotation.y+=.05,game.camera.rotation.y>player.rotation.y+30*Math.PI/180&&(controls.areLocked=!1,game.camera.rotation.y=player.rotation.y+30*Math.PI/180)):"left-to-center"===player.look?(controls.areLocked=!0,game.camera.rotation.y-=.05,game.camera.rotation.y<player.rotation.y&&(controls.areLocked=!1,game.camera.rotation.y=player.rotation.y)):"center-to-right"===player.look?(controls.areLocked=!0,game.camera.rotation.y-=.05,game.camera.rotation.y<player.rotation.y-30*Math.PI/180&&(controls.areLocked=!1,game.camera.rotation.y=player.rotation.y-30*Math.PI/180)):"right-to-center"===player.look&&(controls.areLocked=!0,game.camera.rotation.y+=.05,game.camera.rotation.y>player.rotation.y&&(controls.areLocked=!1,game.camera.rotation.y=player.rotation.y));game.pass.uniforms.uTime.value=game.time,game.composer.render()}